// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

namespace Microsoft.Quantum.QsCompiler.BondSchemas;

// Data structures from DataTypes.fs

struct Position
{
    5: required int32 Line;

    10: required int32 Column;
}

struct Range
{
    5: required Position Start;

    10: required Position End;
}

// Data structures from SyntaxTokens.fs

enum AccessModifier
{
    DefaultAccess,
    Internal
}

struct Modifiers
{
    5: required AccessModifier Access = DefaultAccess;
}

enum QsGeneratorDirective
{
    SelfInverse,
    Invert,
    Distribute,
    InvalidGenerator
}

enum QsResult
{
    Zero,
    One
}

enum QsPauli
{
    PauliX,
    PauliY,
    PauliZ,
    PauliI
}

// N.B. Does not completely represent F#'s QsExpressionKind.
//      Used by QsExpressionKindComposition to do a complete representation of the original F# type.
enum QsExpressionKind
{
    UnitValue,
    Identifier,
    ValueTuple,
    IntLiteral,
    BigIntLiteral,
    DoubleLiteral,
    BoolLiteral,
    StringLiteral,
    ResultLiteral,
    PauliLiteral,
    RangeLiteral,
    NewArray,
    ValueArray,
    ArrayItem,
    NamedItem,
    NEG,
    NOT,
    BNOT,
    ADD,
    SUB,
    MUL,
    DIV,
    MOD,
    POW,
    EQ,
    NEQ,
    LT,
    LTE,
    GT,
    GTE,
    AND,
    OR,
    BOR,
    BAND,
    BXOR,
    LSHIFT,
    RSHIFT,
    CONDITIONAL,
    CopyAndUpdate,
    UnwrapApplication,
    AdjointApplication,
    ControlledApplication,
    CallLikeExpression,
    MissingExpr,
    InvalidExpr
}

// Used to encapsulate data when QsExpressionKind is Identifier.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindIdentifier<TSymbol, TType>
{
    5: required TSymbol Symbol;

    10: nullable<vector<TType>> Types;
}

// Used to encapsulate data when QsExpressionKind is StringLiteral.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindStringLiteral<TExpression>
{
    5: required string StringLiteral;

    10: required vector<TExpression> Expressions;
}

// Used to encapsulate data when QsExpressionKind is RangeLiteral, ArrayItem, ADD, SUB, MUL, DIV, MOD, POW, EQ, NEQ, LT, LTE, GT, GTE, AND, OR, BOR, BAND, BXOR, LSHIFT, RSHIFT, CallLikeApplication.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindExpressionDouble<TExpression>
{
    5: required TExpression Expression1;

    10: required TExpression Expression2;
}

// Used to encapsulate data when QsExpressionKind is CONDITIONAL, CopyAndUpdate.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindExpressionTriple<TExpression>
{
    5: required TExpression Expression1;

    10: required TExpression Expression2;

    15: required TExpression Expression3;
}

// Used to encapsulate data when QsExpressionKind is NewArray.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindNewArray<TExpression, TType>
{
    5: required TType Type;

    10: required TExpression Expression;
}

// Used to encapsulate data when QsExpressionKind is NamedItem.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindNamedItem<TExpression, TSymbol>
{
    5: required TExpression Expression;

    10: required TSymbol Symbol;
}

// Completely represents F#'s QsExpressionKind.
// N.B. Does not have an equivalent F# type.
struct QsExpressionKindComposition<TExpression, TSymbol, TType>
{
    5: required QsExpressionKind Kind = InvalidExpr;

    // Not null when Kind is Identifier.
    10: nullable<QsExpressionKindIdentifier<TSymbol, TType>> Identifier;

    // Not null when Kind is IntLiteral.
    20: nullable<int64> IntLiteral;

    // Not null when Kind is BigIntLiteral.
    25: nullable<blob> BigIntLiteral;

    // Not null when Kind is DoubleLiteral.
    30: nullable<double> DoubleLiteral;

    // Not null when Kind is BoolLiteral.
    35: nullable<bool> BoolLiteral;

    // Not null when Kind is StringLiteral.
    40: nullable<QsExpressionKindStringLiteral<TExpression>> StringLiteral;

    // Not null when Kind is ResultLiteral.
    45: nullable<QsResult> ResultLiteral;

    // Not null when Kind is PauliLiteral.
    50: nullable<QsPauli> PauliLiteral;

    // Not null when Kind is NewArray.
    55: nullable<QsExpressionKindNewArray<TExpression, TType>> NewArray;

    // Not null when Kind is NamedItem.
    60: nullable<QsExpressionKindNamedItem<TExpression, TSymbol>> NamedItem;

    // Not null when Kind is NEG, NOT, BNOT, UnwrapApplication, AdjointApplication, ControlledApplication.
    65: nullable<TExpression> Expression;

    // Not null when Kind is RangeLiteral, ArrayItem, ADD, SUB, MUL, DIV, MOD, POW, EQ, NEQ, LT, LTE, GT, GTE, AND, OR, BOR, BAND, BXOR, LSHIFT, RSHIFT, CallLikeApplication.
    70: nullable<QsExpressionKindExpressionDouble<TExpression>> ExpressionDouble;

    // Not null when Kind is CONDITIONAL, CopyAndUpdate.
    75: nullable<QsExpressionKindExpressionTriple<TExpression>> ExpressionTriple;

    // Not null when Kind is ValueTuple, ValueArray.
    80: nullable<vector<TExpression>> ExpressionArray;
}

// Data structures from SyntaxTree.fs

enum QsBindingKind
{
    ImmutableBinding,
    MutableBinding
}

enum QsSpecializationKind
{
    QsBody,
    QsAdjoint,
    QsControlled,
    QsControlledAdjoint
}

enum QsCallableKind
{
    Operation,
    Function,
    TypeConstructor
}

enum QsQubitScopeKind
{
    Allocate,
    Borrow
}

struct QsQualifiedName
{
    5: required string Namespace;

    10: required string Name;
}

// Represents the possible kinds of SymbolTuple.
// N.B. Does not have an equivalent F# type.
enum SymbolTupleKind
{
    InvalidItem,
    VariableName,
    VariableNameTuple,
    DiscardedItem
}

struct SymbolTuple
{
    5: required SymbolTupleKind Kind = InvalidItem;

    // Not null when Kind is VariableName.
    10: nullable<string> VariableName;

    // Not null when Kind is VariableNameTuple.
    15: nullable<vector<SymbolTuple>> VariableNameTuple;
}

struct QsBinding<T>
{
    5: required QsBindingKind Kind = ImmutableBinding;

    10: required SymbolTuple Lhs;

    15: required T Rhs;
}

// Represents the possible kinds of Identifier.
// N.B. Does not have an equivalent F# type.
enum IdentifierKind
{
    LocalVariable,
    GlobalCallable,
    InvalidIdentifier
}

struct Identifier
{
    5: required IdentifierKind Kind = LocalVariable;

    // Not null when Kind is LocalVariable.
    10: nullable<string> LocalVariable;

    // Not null when Kind is GlobalCallable.
    15: nullable<QsQualifiedName> GlobalCallable;
}

struct QsLocation
{
    5: required Position Offset;

    10: required Range Range;
}

struct QsTypeParameter
{
    5: required QsQualifiedName Origin;

    10: required string TypeName;

    15: nullable<Range> Range;
}

struct UserDefinedType
{
    5: required string Namespace;

    10: required string Name;

    15: nullable<Range> Range;
}

enum OpProperty
{
    Adjointable,
    Controllable
}

// N.B. Does not completely represent F#'s CharacteristicsKind.
//      Used by CharacteristicsKindComposition to do a complete representation of the original F# type.
enum CharacteristicsKind
{
    EmptySet,
    SimpleSet,
    Union,
    Intersection,
    InvalidSetExpr
}

// Used to encapsulate data when CharacteristicsKind is Union or Intersection.
// N.B. Does not have an equivalent F# type.
struct CharacteristicsKindSetOperation<T>
{
    5: required T SetA;

    10: required T SetB;
}

// Completely represents F#'s CharacteristicsKind.
// N.B. Does not have an equivalent F# type.
struct CharacteristicsKindComposition<T>
{
    5: required CharacteristicsKind Kind = InvalidSetExpr;

    // Not null when Kind is SimpleSet.
    10: nullable<OpProperty> SimpleSet;

    // Not null when Kind is Union or Intersection.
    15: nullable<CharacteristicsKindSetOperation<T>> SetOperation;
}

struct ResolvedCharacteristics
{
    5: required CharacteristicsKindComposition<ResolvedCharacteristics> Expression;
}

struct InferredCallableInformation
{
    5: required bool IsSelfAdjoint;

    10: required bool IsIntrinsic;
}

struct CallableInformation
{
    5: required ResolvedCharacteristics Characteristics;

    10: required InferredCallableInformation InferredInformation;
}

// N.B. Does not completely represent F#'s QsTypeKind.
//      Used by QsTypeKindComposition to do a complete representation of the original F# type.
enum QsTypeKind
{
    UnitType,
    Int,
    BigInt,
    Double,
    Bool,
    String,
    Qubit,
    Result,
    Pauli,
    Range,
    ArrayType,
    TupleType,
    UserDefinedType,
    TypeParameter,
    Operation,
    Function,
    MissingType,
    InvalidType
}

// Used to encapsulate data when QsTypeKind is Function.
// N.B. Does not have an equivalent F# type.
struct QsTypeKindFunction<T>
{
    5: required T DataA;

    10: required T DataB;
}

// Used to encapsulate data when QsTypeKind is Operation.
// N.B. Does not have an equivalent F# type.
struct QsTypeKindOperation<TData, TCharacteristics>
{
    5: required TData DataA;

    10: required TData DataB;

    15: required TCharacteristics Characteristics;
}

// Completely represents F#'s QsTypeKind.
// N.B. Does not have an equivalent F# type.
struct QsTypeKindComposition<TData, TUdt, TParam, TCharacteristics>
{
    5: required QsTypeKind Kind = InvalidType;

    // Not null when Kind is ArrayType.
    10: nullable<TData> ArrayType;

    // Not null when Kind is TupleType.
    15: nullable<vector<TData>> TupleType;

    // Not null when Kind is UserDefinedType.
    20: nullable<TUdt> UserDefinedType;

    // Not null when Kind is TypeParameter.
    25: nullable<TParam> TypeParameter;

    // Not null when Kind is Operation.
    30: nullable<QsTypeKindOperation<TData, TCharacteristics>> Operation;

    // Not null when Kind is Function.
    35: nullable<QsTypeKindFunction<TData>> Function;
}

struct ResolvedType
{
    5: required QsTypeKindComposition<ResolvedType, UserDefinedType, QsTypeParameter, CallableInformation> TypeKind;
}

struct InferredExpressionInformation
{
    5: required bool IsMutable;

    10: required bool HasLocalQuantumDependency;
}

struct TypedArgument
{
    5: required QsQualifiedName Callable;

    10: required string Name;

    15: required ResolvedType Resolution;
}

struct TypedExpression
{
    5: required QsExpressionKindComposition<TypedExpression, Identifier, ResolvedType> Expression;

    10: required vector<TypedArgument> TypedArguments;

    15: required ResolvedType ResolvedType;

    20: required InferredExpressionInformation InferredInformation;

    25: nullable<Range> Range;
}

// N.B. Does not completely represent F#'s QsInitializerKind.
//      Used by QsInitializerKindComposition to do a complete representation of the original F# type.
enum QsInitializerKind
{
    SingleQubitAllocation,
    QubitRegisterAllocation,
    QubitTupleAllocation,
    InvalidInitializer
}

// Completely represents F#'s QsInitializerKind.
// N.B. Does not have an equivalent F# type.
struct QsInitializerKindComposition<TInitializer, TExpression>
{
    5: required QsInitializerKind Kind = InvalidInitializer;

    // Not null when Kind is QubitRegisterAllocation.
    10: nullable<TExpression> QubitRegisterAllocation;

    // Not null when Kind is QubitTupleAllocation.
    15: nullable<vector<TInitializer>> QubitTupleAllocation;
}

struct ResolvedInitializer
{
    5: required QsInitializerKindComposition<ResolvedInitializer, TypedExpression> Initializer;

    10: required ResolvedType ResolvedType;
}

struct LocalVariableDeclaration<TVariableName>
{
    5: required TVariableName VariableName;

    10: required ResolvedType Type;

    15: required InferredExpressionInformation InferredInformation;

    20: nullable<Position> Position;

    25: required Range Range;
}

struct LocalDeclarations
{
    5: required vector<LocalVariableDeclaration<string>> Variables;
}

struct QsValueUpdate
{
    5: required TypedExpression Lhs;

    10: required TypedExpression Rhs;
}

struct QsComments
{
    5: required vector<string> OpeningComments;

    10: required vector<string> ClosingComments;
}

struct QsScope;

struct QsPositionedBlock
{
    5: required QsScope Body;

    10: nullable<QsLocation> Location;

    15: required QsComments Comments;
}

// Used to encapsulate a conditional block tuple.
// N.B. Does not have an equivalent F# type.
struct QsConditionalBlock
{
    5: required TypedExpression Expression;

    10: required QsPositionedBlock Block;
}

struct QsConditionalStatement
{
    5: required vector<QsConditionalBlock> ConditionalBlocks;

    10: nullable<QsPositionedBlock> Default;
}

// Used to encapsulate a loop item tuple.
// N.B. Does not have an equivalent F# type.
struct QsLoopItem
{
    5: required SymbolTuple SymbolTuple;

    10: required ResolvedType ResolvedType;
}

struct QsForStatement
{
    5: required QsLoopItem LoopItem;

    10: required TypedExpression IterationValues;

    15: required QsScope Body;
}

struct QsWhileStatement
{
    5: required TypedExpression Condition;

    10: required QsScope Body;
}

struct QsRepeatStatement
{
    5: required QsPositionedBlock RepeatBlock;

    10: required TypedExpression SuccessCondition;

    15: required QsPositionedBlock FixupBlock;
}

struct QsConjugation
{
    5: required QsPositionedBlock OuterTransformation;

    10: required QsPositionedBlock InnerTransformation;
}

struct QsQubitScope
{
    5: required QsQubitScopeKind Kind = Allocate;

    10: required QsBinding<ResolvedInitializer> Binding;

    15: required QsScope Body;
}

// N.B. Does not completely represent F#'s QsStatementKind.
//      Used by QsStatementKindComposition to do a complete representation of the original F# type.
enum QsStatementKind
{
    QsExpressionStatement,
    QsReturnStatement,
    QsFailStatement,
    QsVariableDeclaration,
    QsValueUpdate,
    QsConditionalStatement,
    QsForStatement,
    QsWhileStatement,
    QsRepeatStatement,
    QsConjugation,
    QsQubitScope,
    EmptyStatement
}

// Completely represents F#'s QsStatementKind.
// N.B. Does not have an equivalent F# type.
struct QsStatementKindComposition
{
    5: required QsStatementKind Kind = EmptyStatement;

    // Not null when Kind is QsExpressionStatement, QsReturnStatement, QsFailStatement.
    10: nullable<TypedExpression> TypedExpression;

    // Not null when Kind is QsVariableDeclaration.
    15: nullable<QsBinding<TypedExpression>> VariableDeclaration;

    // Not null when Kind is QsValueUpdate.
    20: nullable<QsValueUpdate> ValueUpdate;

    // Not null when Kind is QsConditionalStatement.
    25: nullable<QsConditionalStatement> ConditionalStatement;

    // Not null when Kind is QsForStatement.
    30: nullable<QsForStatement> ForStatement;

    // Not null when Kind is QsWhileStatement.
    35: nullable<QsWhileStatement> WhileStatement;

    // Not null when Kind is QsRepeatStatement.
    40: nullable<QsRepeatStatement> RepeatStatement;

    // Not null when Kind is QsConjugation.
    45: nullable<QsConjugation> Conjugation;

    // Not null when Kind is QsQubitScope.
    50: nullable<QsQubitScope> QubitScope;
}

struct QsStatement
{
    5: required QsStatementKindComposition Statement;

    10: required LocalDeclarations SymbolDeclarations;

    15: nullable<QsLocation> Location;

    20: required QsComments Comments;
}

struct QsScope
{
    5: required vector<QsStatement> Statements;

    10: required LocalDeclarations KnownSymbols;
}

// Represents the possible kinds of QsLocalSymbol.
// N.B. Does not have an equivalent F# type.
enum QsLocalSymbolKind
{
    ValidName,
    InvalidName
}

struct QsLocalSymbol
{
    5: required QsLocalSymbolKind Kind = InvalidName;

    // Non-null when 'Kind' is 'ValidName'.
    10: nullable<string> Name;
}

struct QsDeclarationAttribute
{
    5: nullable<UserDefinedType> TypeId;

    10: required TypedExpression Argument;

    15: required Position Offset;

    20: required QsComments Comments;
}

struct ResolvedSignature
{
    5: required vector<QsLocalSymbol> TypeParameters;

    10: required ResolvedType ArgumentType;

    15: required ResolvedType ReturnType;

    20: required CallableInformation Information;
}

// Represents the possible kinds of QsTuple.
// N.B. Does not have an equivalent F# type.
enum QsTupleKind
{
    QsTupleItem,
    QsTuple
}

struct QsTuple<T>
{
    5: required QsTupleKind Kind = QsTupleItem;

    // Not null when Kind is QsTupleItem.
    10: nullable<T> Item;

    // Not null when Kind is QsTuple.
    15: nullable<vector<QsTuple<T>>> Items;
}

// Represents the possible kinds of SpecializationImplementation.
// N.B. Does not have an equivalent F# type.
enum SpecializationImplementationKind
{
    Provided,
    Intrinsic,
    External,
    Generated
}

// Used to encapsulate data when SpecializationImplementationKind is Provided.
// N.B. Does not have an equivalent F# type.
struct SpecializationImplementationKindProvided
{
    5: required QsTuple<LocalVariableDeclaration<QsLocalSymbol>> Tuple;

    10: required QsScope Implementation;
}

struct SpecializationImplementation
{
    5: required SpecializationImplementationKind Kind = Generated;

    // Not null when Kind is Provided.
    10: nullable<SpecializationImplementationKindProvided> Provided;

    // Not null when Kind is Generated.
    15: nullable<QsGeneratorDirective> Generated;
}

struct QsSpecialization
{
    5: required QsSpecializationKind Kind = QsBody;

    10: required QsQualifiedName Parent;

    15: required vector<QsDeclarationAttribute> Attributes;

    20: required string SourceFile;

    25: nullable<QsLocation> Location;

    30: nullable<vector<ResolvedType>> TypeArguments;

    35: required ResolvedSignature Signature;

    40: required SpecializationImplementation Implementation;

    45: required vector<string> Documentation;

    50: required QsComments Comments;
}

struct QsCallable
{
    5: required QsCallableKind Kind = Operation;

    10: required QsQualifiedName FullName;

    15: required vector<QsDeclarationAttribute> Attributes;

    20: required Modifiers Modifiers;

    25: required string SourceFile;

    30: nullable<QsLocation> Location;

    35: required ResolvedSignature Signature;

    40: required QsTuple<LocalVariableDeclaration<QsLocalSymbol>> ArgumentTuple;

    45: required vector<QsSpecialization> Specializations;

    50: required vector<string> Documentation;

    55: required QsComments Comments;
}

// Represents the possible kinds of QsTypeItem.
// N.B. Does not have an equivalent F# type.
enum QsTypeItemKind
{
    Named,
    Anonymous
}

struct QsTypeItem
{
    5: required QsTypeItemKind Kind = Named;

    // Not null when Kind is Named.
    10: nullable<LocalVariableDeclaration<string>> Named;

    // Not null when Kind is Anonymous.
    15: nullable<ResolvedType> Anonymous;
}

struct QsCustomType
{
    5: required QsQualifiedName FullName;

    10: required vector<QsDeclarationAttribute> Attributes;

    15: required Modifiers Modifiers;

    20: required string SourceFile;

    25: nullable<QsLocation> Location;

    30: required ResolvedType Type;

    35: required QsTuple<QsTypeItem> TypeItems;

    40: required vector<string> Documentation;

    45: required QsComments Comments;
}

// Represents the possible kinds of QsNamespaceElement.
// N.B. Does not have an equivalent F# type.
enum QsNamespaceElementKind
{
    QsCallable,
    QsCustomType
}

struct QsNamespaceElement
{
    5: required QsNamespaceElementKind Kind = QsCallable;

    // Non-null when 'Kind' is 'QsCallable'.
    10: nullable<QsCallable> Callable;

    // Non-null when 'Kind' is 'QsCustomType'.
    15: nullable<QsCustomType> CustomType;
}

// Used to encapsulate F#'s representation of namespace documentation.
// N.B. Does not have an equivalent F# type.
struct QsSourceFileDocumentation
{
    5: required string FileName;

    10: required vector<string> DocumentationItems;
}

struct QsNamespace
{
    5: required string Name;

    10: required vector<QsNamespaceElement> Elements;

    15: required list<QsSourceFileDocumentation> Documentation;
}

struct QsCompilation
{
    5: required vector<QsNamespace> Namespaces;

    10: required vector<QsQualifiedName> EntryPoints;
}
